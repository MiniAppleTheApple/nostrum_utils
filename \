defmodule Elppa.Test.Settings do
  use ExUnit.Case

  alias Elppa.Settings
  alias Nostrum.Struct.Embed
  alias Nostrum.Struct.Component

  @example %{ 
    "buttons" => [
      %{"label" => "Example blue button", "style" => 1},
      %{"label" => "Example grey button", "style" => 2},
      %{"label" => "Example green button", "style" => 3},
      %{"label" => "Example red button", "style" => 4},
      %{
        "label" => "Example link button",
        "style" => 5,
        "url" => "https://www.youtube.com"
      }
    ],
    "embed" => %{
      "color" => "#ffffff",
      "fields" => [
        %{
          "inline" => true,
          "name" => "example field",
          "value" => "example value"
        },
        %{
          "inline" => true,
          "name" => "example field",
          "value" => "example value"
        }
      ],
      "image" => "Test image link",
      "description" => "Example Subtitle",
      "thumbnail" => "Test image link",
      "title" => "Example Title",
    }
  }
  @serialized %Elppa.Settings{
    buttons: [
      %Component{
        components: nil,
        custom_id: nil,
        disabled: false,
        emoji: nil,
        label: "Example blue button",
        max_length: nil,
        max_values: nil,
        min_length: nil,
        min_values: nil,
        options: nil,
        placeholder: nil,
        required: nil,
        style: 1,
        type: 2,
        url: nil,
        value: nil
      },
      %Component{
        components: nil,
        custom_id: nil,
        disabled: false,
        emoji: nil,
        label: "Example grey button",
        max_length: nil,
        max_values: nil,
        min_length: nil,
        min_values: nil,
        options: nil,
        placeholder: nil,
        required: nil,
        style: 2,
        type: 2,
        url: nil,
        value: nil
      },
      %Component{
        components: nil,
        custom_id: nil,
        disabled: false,
        emoji: nil,
        label: "Example green button",
        max_length: nil,
        max_values: nil,
        min_length: nil,
        min_values: nil,
        options: nil,
        placeholder: nil,
        required: nil,
        style: 3,
        type: 2,
        url: nil,
        value: nil
      },
      %Component{
        components: nil,
        custom_id: nil,
        disabled: false,
        emoji: nil,
        label: "Example red button",
        max_length: nil,
        max_values: nil,
        min_length: nil,
        min_values: nil,
        options: nil,
        placeholder: nil,
        required: nil,
        style: 4,
        type: 2,
        url: nil,
        value: nil
      },
      %Component{
        components: nil,
        custom_id: nil,
        disabled: false,
        emoji: nil,
        label: "Example link button",
        max_length: nil,
        max_values: nil,
        min_length: nil,
        min_values: nil,
        options: nil,
        placeholder: nil,
        required: nil,
        style: 5,
        type: 2,
        url: "https://www.youtube.com",
        value: nil
      }
    ],
    embed: %Embed{
      author: nil,
      color: "#ffffff",
      description: "Example Subtitle",
      fields: [
        %{"inline" => true, "name" => "example field", "value" => "example value"},
        %{"inline" => true, "name" => "example field", "value" => "example value"}
      ],
      footer: nil,
      image: "Test image link",
      provider: nil,
      thumbnail: "Test image link",
      timestamp: nil,
      title: "Example Title",
      type: nil,
      url: nil,
      video: nil
    }
  }

  def duplicate_a(length), do: "a" |> List.duplicate(length) |> Enum.join("")

  test "Data serialization" do
    {:ok, data} = Settings.new(@example)
    assert data == @serialized
  end

  test "embed field" do
    assert {:error, [{:not_a_map, "embed"}]} = Settings.new(@example |> Map.put("embed", nil))
  end

  test "embed.title field" do
    embed = embed |> Map.put("title", nil)
    assert {:error, [{:not_a_string, "embed.title"}]} = Settings.new(@example |> Map.put("embed", embed))
    embed = embed |> Map.put("title", duplicate_a())
    assert {:error, [{:character_length_passed_the_limit, "embed.title"}]} = Settings.new(@example |> Map.put("embed", embed))
  end
end
